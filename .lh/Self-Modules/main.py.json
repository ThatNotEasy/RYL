{
    "sourceFile": "Self-Modules/main.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 13,
            "patches": [
                {
                    "date": 1759246465793,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1759246516924,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,19 +19,63 @@\n         convert_to_csv,\r\n         process_txt_files,\r\n         auto_detect_convert_and_save\r\n     )\r\n-    from mysql import MYSQL\r\n-    from sqlserver import SQLSERVER\r\n-    from restore_database import restore_database_and_create_table, setup_logging\r\n-    from auto_create_db_table_column import main as create_tables_main\r\n-    from show_all_db_table_column import get_all_table_info, CustomJSONEncoder\r\n-    from tengah_cuba_insert_semua import main as migrate_data_main\r\n-    from test_connection import test_connection\r\n     from txt_into_csv import convert_txt_to_csv, main as txt_to_csv_main\r\n+\r\n+    # Database modules (optional - require dependencies)\r\n+    try:\r\n+        from mysql import MYSQL\r\n+        MYSQL_AVAILABLE = True\r\n+    except ImportError:\r\n+        MYSQL_AVAILABLE = False\r\n+        logger.warning(\"MySQL module not available - install mysql-connector-python\")\r\n+\r\n+    try:\r\n+        from sqlserver import SQLSERVER\r\n+        SQLSERVER_AVAILABLE = True\r\n+    except ImportError:\r\n+        SQLSERVER_AVAILABLE = False\r\n+        logger.warning(\"SQL Server module not available - install pyodbc\")\r\n+\r\n+    try:\r\n+        from restore_database import restore_database_and_create_table, setup_logging\r\n+        RESTORE_AVAILABLE = True\r\n+    except ImportError:\r\n+        RESTORE_AVAILABLE = False\r\n+        logger.warning(\"Database restore module not available - install pyodbc\")\r\n+\r\n+    try:\r\n+        from auto_create_db_table_column import main as create_tables_main\r\n+        TABLES_AVAILABLE = True\r\n+    except ImportError:\r\n+        TABLES_AVAILABLE = False\r\n+        logger.warning(\"Table creation module not available - missing dependencies\")\r\n+\r\n+    try:\r\n+        from show_all_db_table_column import get_all_table_info, CustomJSONEncoder\r\n+        SHOW_TABLES_AVAILABLE = True\r\n+    except ImportError:\r\n+        SHOW_TABLES_AVAILABLE = False\r\n+        logger.warning(\"Show tables module not available - missing dependencies\")\r\n+\r\n+    try:\r\n+        from tengah_cuba_insert_semua import main as migrate_data_main\r\n+        MIGRATE_AVAILABLE = True\r\n+    except ImportError:\r\n+        MIGRATE_AVAILABLE = False\r\n+        logger.warning(\"Data migration module not available - missing dependencies\")\r\n+\r\n+    try:\r\n+        from test_connection import test_connection\r\n+        TEST_CONNECTION_AVAILABLE = True\r\n+    except ImportError:\r\n+        TEST_CONNECTION_AVAILABLE = False\r\n+        logger.warning(\"Test connection module not available - missing dependencies\")\r\n+\r\n except ImportError as e:\r\n-    print(f\"Error importing modules: {e}\")\r\n-    print(\"Please ensure all required modules are available and config.ini exists\")\r\n+    print(f\"Error importing core modules: {e}\")\r\n+    print(\"Please ensure all required Python files are available\")\r\n     sys.exit(1)\r\n \r\n # Setup logging\r\n logging.basicConfig(\r\n"
                },
                {
                    "date": 1759246525637,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -161,16 +161,31 @@\n                 self.txt_to_csv(args.input, args.output)\r\n             elif args.command == 'format-itemscript':\r\n                 self.format_itemscript(args.input_folder, args.output_folder)\r\n             elif args.command == 'test-connection':\r\n+                if not TEST_CONNECTION_AVAILABLE:\r\n+                    print(\"Error: Test connection module not available. Install required dependencies.\")\r\n+                    sys.exit(1)\r\n                 self.test_db_connection()\r\n             elif args.command == 'show-tables':\r\n+                if not SHOW_TABLES_AVAILABLE:\r\n+                    print(\"Error: Show tables module not available. Install required dependencies.\")\r\n+                    sys.exit(1)\r\n                 self.show_database_tables(args.database)\r\n             elif args.command == 'migrate-data':\r\n+                if not MIGRATE_AVAILABLE:\r\n+                    print(\"Error: Data migration module not available. Install required dependencies.\")\r\n+                    sys.exit(1)\r\n                 self.migrate_database_data()\r\n             elif args.command == 'create-tables':\r\n+                if not TABLES_AVAILABLE:\r\n+                    print(\"Error: Table creation module not available. Install required dependencies.\")\r\n+                    sys.exit(1)\r\n                 self.create_database_tables()\r\n             elif args.command == 'restore-db':\r\n+                if not RESTORE_AVAILABLE:\r\n+                    print(\"Error: Database restore module not available. Install required dependencies.\")\r\n+                    sys.exit(1)\r\n                 self.restore_database(args)\r\n             elif args.command == 'convert-txt':\r\n                 self.convert_generic_txt(args.input_folder, args.output_folder)\r\n             else:\r\n"
                },
                {
                    "date": 1759246538820,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,19 @@\n import logging\r\n from datetime import datetime\r\n from typing import Optional\r\n \r\n+# Setup logging first\r\n+logging.basicConfig(\r\n+    level=logging.INFO,\r\n+    format='%(asctime)s - %(levelname)s - %(message)s',\r\n+    handlers=[\r\n+        logging.FileHandler('self_modules.log'),\r\n+        logging.StreamHandler()\r\n+    ]\r\n+)\r\n+logger = logging.getLogger(__name__)\r\n+\r\n # Import all the modules\r\n try:\r\n     from format_itemscript import (\r\n         is_valid_ryl2_txt,\r\n"
                },
                {
                    "date": 1759246546664,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,18 +87,8 @@\n     print(f\"Error importing core modules: {e}\")\r\n     print(\"Please ensure all required Python files are available\")\r\n     sys.exit(1)\r\n \r\n-# Setup logging\r\n-logging.basicConfig(\r\n-    level=logging.INFO,\r\n-    format='%(asctime)s - %(levelname)s - %(message)s',\r\n-    handlers=[\r\n-        logging.FileHandler('self_modules.log'),\r\n-        logging.StreamHandler()\r\n-    ]\r\n-)\r\n-logger = logging.getLogger(__name__)\r\n \r\n class SelfModulesCLI:\r\n     \"\"\"Main CLI class for Self-Modules\"\"\"\r\n \r\n"
                },
                {
                    "date": 1759246702885,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n logger = logging.getLogger(__name__)\r\n \r\n # Import all the modules\r\n try:\r\n-    from format_itemscript import (\r\n+    from moules.format_itemscript import (\r\n         is_valid_ryl2_txt,\r\n         convert_to_csv,\r\n         process_txt_files,\r\n         auto_detect_convert_and_save\r\n"
                },
                {
                    "date": 1759246708824,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,15 +24,15 @@\n logger = logging.getLogger(__name__)\r\n \r\n # Import all the modules\r\n try:\r\n-    from moules.format_itemscript import (\r\n+    from modules.format_itemscript import (\r\n         is_valid_ryl2_txt,\r\n         convert_to_csv,\r\n         process_txt_files,\r\n         auto_detect_convert_and_save\r\n     )\r\n-    from txt_into_csv import convert_txt_to_csv, main as txt_to_csv_main\r\n+    from modules.txt_into_csv import convert_txt_to_csv, main as txt_to_csv_main\r\n \r\n     # Database modules (optional - require dependencies)\r\n     try:\r\n         from mysql import MYSQL\r\n"
                },
                {
                    "date": 1759246714189,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,23 +34,23 @@\n     from modules.txt_into_csv import convert_txt_to_csv, main as txt_to_csv_main\r\n \r\n     # Database modules (optional - require dependencies)\r\n     try:\r\n-        from mysql import MYSQL\r\n+        from modules.mysql import MYSQL\r\n         MYSQL_AVAILABLE = True\r\n     except ImportError:\r\n         MYSQL_AVAILABLE = False\r\n         logger.warning(\"MySQL module not available - install mysql-connector-python\")\r\n \r\n     try:\r\n-        from sqlserver import SQLSERVER\r\n+        from modules.sqlserver import SQLSERVER\r\n         SQLSERVER_AVAILABLE = True\r\n     except ImportError:\r\n         SQLSERVER_AVAILABLE = False\r\n         logger.warning(\"SQL Server module not available - install pyodbc\")\r\n \r\n     try:\r\n-        from restore_database import restore_database_and_create_table, setup_logging\r\n+        from modules.restore_database import restore_database_and_create_table, setup_logging\r\n         RESTORE_AVAILABLE = True\r\n     except ImportError:\r\n         RESTORE_AVAILABLE = False\r\n         logger.warning(\"Database restore module not available - install pyodbc\")\r\n"
                },
                {
                    "date": 1759246719971,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,30 +55,30 @@\n         RESTORE_AVAILABLE = False\r\n         logger.warning(\"Database restore module not available - install pyodbc\")\r\n \r\n     try:\r\n-        from auto_create_db_table_column import main as create_tables_main\r\n+        from modules.auto_create_db_table_column import main as create_tables_main\r\n         TABLES_AVAILABLE = True\r\n     except ImportError:\r\n         TABLES_AVAILABLE = False\r\n         logger.warning(\"Table creation module not available - missing dependencies\")\r\n \r\n     try:\r\n-        from show_all_db_table_column import get_all_table_info, CustomJSONEncoder\r\n+        from modules.show_all_db_table_column import get_all_table_info, CustomJSONEncoder\r\n         SHOW_TABLES_AVAILABLE = True\r\n     except ImportError:\r\n         SHOW_TABLES_AVAILABLE = False\r\n         logger.warning(\"Show tables module not available - missing dependencies\")\r\n \r\n     try:\r\n-        from tengah_cuba_insert_semua import main as migrate_data_main\r\n+        from modules.tengah_cuba_insert_semua import main as migrate_data_main\r\n         MIGRATE_AVAILABLE = True\r\n     except ImportError:\r\n         MIGRATE_AVAILABLE = False\r\n         logger.warning(\"Data migration module not available - missing dependencies\")\r\n \r\n     try:\r\n-        from test_connection import test_connection\r\n+        from modules.test_connection import test_connection\r\n         TEST_CONNECTION_AVAILABLE = True\r\n     except ImportError:\r\n         TEST_CONNECTION_AVAILABLE = False\r\n         logger.warning(\"Test connection module not available - missing dependencies\")\r\n"
                },
                {
                    "date": 1759246807623,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,15 +24,15 @@\n logger = logging.getLogger(__name__)\r\n \r\n # Import all the modules\r\n try:\r\n-    from modules.format_itemscript import (\r\n+    from modules.ryl2_itemscript_converter import (\r\n         is_valid_ryl2_txt,\r\n         convert_to_csv,\r\n         process_txt_files,\r\n         auto_detect_convert_and_save\r\n     )\r\n-    from modules.txt_into_csv import convert_txt_to_csv, main as txt_to_csv_main\r\n+    from modules.text_to_csv_converter import convert_txt_to_csv, main as txt_to_csv_main\r\n \r\n     # Database modules (optional - require dependencies)\r\n     try:\r\n         from modules.mysql import MYSQL\r\n"
                },
                {
                    "date": 1759246817958,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,55 +34,55 @@\n     from modules.text_to_csv_converter import convert_txt_to_csv, main as txt_to_csv_main\r\n \r\n     # Database modules (optional - require dependencies)\r\n     try:\r\n-        from modules.mysql import MYSQL\r\n+        from modules.mysql_connector import MYSQL\r\n         MYSQL_AVAILABLE = True\r\n     except ImportError:\r\n         MYSQL_AVAILABLE = False\r\n-        logger.warning(\"MySQL module not available - install mysql-connector-python\")\r\n+        logger.warning(\"MySQL connector not available - install mysql-connector-python\")\r\n \r\n     try:\r\n-        from modules.sqlserver import SQLSERVER\r\n+        from modules.sqlserver_connector import SQLSERVER\r\n         SQLSERVER_AVAILABLE = True\r\n     except ImportError:\r\n         SQLSERVER_AVAILABLE = False\r\n-        logger.warning(\"SQL Server module not available - install pyodbc\")\r\n+        logger.warning(\"SQL Server connector not available - install pyodbc\")\r\n \r\n     try:\r\n-        from modules.restore_database import restore_database_and_create_table, setup_logging\r\n+        from modules.database_restorer import restore_database_and_create_table, setup_logging\r\n         RESTORE_AVAILABLE = True\r\n     except ImportError:\r\n         RESTORE_AVAILABLE = False\r\n-        logger.warning(\"Database restore module not available - install pyodbc\")\r\n+        logger.warning(\"Database restorer not available - install pyodbc\")\r\n \r\n     try:\r\n-        from modules.auto_create_db_table_column import main as create_tables_main\r\n+        from modules.schema_table_creator import main as create_tables_main\r\n         TABLES_AVAILABLE = True\r\n     except ImportError:\r\n         TABLES_AVAILABLE = False\r\n-        logger.warning(\"Table creation module not available - missing dependencies\")\r\n+        logger.warning(\"Schema table creator not available - missing dependencies\")\r\n \r\n     try:\r\n-        from modules.show_all_db_table_column import get_all_table_info, CustomJSONEncoder\r\n+        from modules.database_schema_inspector import get_all_table_info, CustomJSONEncoder\r\n         SHOW_TABLES_AVAILABLE = True\r\n     except ImportError:\r\n         SHOW_TABLES_AVAILABLE = False\r\n-        logger.warning(\"Show tables module not available - missing dependencies\")\r\n+        logger.warning(\"Database schema inspector not available - missing dependencies\")\r\n \r\n     try:\r\n-        from modules.tengah_cuba_insert_semua import main as migrate_data_main\r\n+        from modules.data_migration_tool import main as migrate_data_main\r\n         MIGRATE_AVAILABLE = True\r\n     except ImportError:\r\n         MIGRATE_AVAILABLE = False\r\n-        logger.warning(\"Data migration module not available - missing dependencies\")\r\n+        logger.warning(\"Data migration tool not available - missing dependencies\")\r\n \r\n     try:\r\n-        from modules.test_connection import test_connection\r\n+        from modules.connection_tester import test_connection\r\n         TEST_CONNECTION_AVAILABLE = True\r\n     except ImportError:\r\n         TEST_CONNECTION_AVAILABLE = False\r\n-        logger.warning(\"Test connection module not available - missing dependencies\")\r\n+        logger.warning(\"Connection tester not available - missing dependencies\")\r\n \r\n except ImportError as e:\r\n     print(f\"Error importing core modules: {e}\")\r\n     print(\"Please ensure all required Python files are available\")\r\n"
                },
                {
                    "date": 1759246824903,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -291,10 +291,10 @@\n     def restore_database(self, args):\r\n         \"\"\"Restore database from backup file\"\"\"\r\n         logger.info(f\"Restoring database from {args.backup_file}\")\r\n \r\n-        # Update global variables in restore_database module\r\n-        import restore_database\r\n+        # Update global variables in database_restorer module\r\n+        import modules.database_restorer as database_restorer\r\n         restore_database.server = args.server\r\n         restore_database.database = args.database\r\n         restore_database.username = args.username or 'your_username'\r\n         restore_database.password = args.password or 'your_password'\r\n"
                },
                {
                    "date": 1759246832851,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -293,13 +293,13 @@\n         logger.info(f\"Restoring database from {args.backup_file}\")\r\n \r\n         # Update global variables in database_restorer module\r\n         import modules.database_restorer as database_restorer\r\n-        restore_database.server = args.server\r\n-        restore_database.database = args.database\r\n-        restore_database.username = args.username or 'your_username'\r\n-        restore_database.password = args.password or 'your_password'\r\n-        restore_database.backup_file = args.backup_file\r\n+        database_restorer.server = args.server\r\n+        database_restorer.database = args.database\r\n+        database_restorer.username = args.username or 'your_username'\r\n+        database_restorer.password = args.password or 'your_password'\r\n+        database_restorer.backup_file = args.backup_file\r\n \r\n         try:\r\n             setup_logging()\r\n             restore_database_and_create_table()\r\n"
                },
                {
                    "date": 1759246948800,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n logging.basicConfig(\r\n     level=logging.INFO,\r\n     format='%(asctime)s - %(levelname)s - %(message)s',\r\n     handlers=[\r\n-        logging.FileHandler('self_modules.log'),\r\n+        logging.FileHandler('logs/self_modules.log'),\r\n         logging.StreamHandler()\r\n     ]\r\n )\r\n logger = logging.getLogger(__name__)\r\n"
                }
            ],
            "date": 1759246465793,
            "name": "Commit-0",
            "content": "#!/usr/bin/env python3\r\n\"\"\"\r\nMain entry point for Self-Modules\r\nIntegrates all database and file processing modules with command line interface\r\n\"\"\"\r\n\r\nimport argparse\r\nimport sys\r\nimport os\r\nimport json\r\nimport logging\r\nfrom datetime import datetime\r\nfrom typing import Optional\r\n\r\n# Import all the modules\r\ntry:\r\n    from format_itemscript import (\r\n        is_valid_ryl2_txt,\r\n        convert_to_csv,\r\n        process_txt_files,\r\n        auto_detect_convert_and_save\r\n    )\r\n    from mysql import MYSQL\r\n    from sqlserver import SQLSERVER\r\n    from restore_database import restore_database_and_create_table, setup_logging\r\n    from auto_create_db_table_column import main as create_tables_main\r\n    from show_all_db_table_column import get_all_table_info, CustomJSONEncoder\r\n    from tengah_cuba_insert_semua import main as migrate_data_main\r\n    from test_connection import test_connection\r\n    from txt_into_csv import convert_txt_to_csv, main as txt_to_csv_main\r\nexcept ImportError as e:\r\n    print(f\"Error importing modules: {e}\")\r\n    print(\"Please ensure all required modules are available and config.ini exists\")\r\n    sys.exit(1)\r\n\r\n# Setup logging\r\nlogging.basicConfig(\r\n    level=logging.INFO,\r\n    format='%(asctime)s - %(levelname)s - %(message)s',\r\n    handlers=[\r\n        logging.FileHandler('self_modules.log'),\r\n        logging.StreamHandler()\r\n    ]\r\n)\r\nlogger = logging.getLogger(__name__)\r\n\r\nclass SelfModulesCLI:\r\n    \"\"\"Main CLI class for Self-Modules\"\"\"\r\n\r\n    def __init__(self):\r\n        self.parser = argparse.ArgumentParser(\r\n            description=\"Self-Modules - Database and File Processing Tools\",\r\n            formatter_class=argparse.RawDescriptionHelpFormatter,\r\n            epilog=\"\"\"\r\nExamples:\r\n  python main.py txt-to-csv --input INPUT --output OUTPUT\r\n  python main.py format-itemscript --input-folder INPUT --output-folder OUTPUT\r\n  python main.py test-connection\r\n  python main.py show-tables --database mydb\r\n  python main.py migrate-data\r\n  python main.py create-tables\r\n  python main.py restore-db --backup-file backup.bak\r\n            \"\"\"\r\n        )\r\n        self.setup_arguments()\r\n\r\n    def setup_arguments(self):\r\n        \"\"\"Setup command line arguments\"\"\"\r\n        subparsers = self.parser.add_subparsers(dest='command', help='Available commands')\r\n\r\n        # TXT to CSV conversion (format_itemscript)\r\n        txt_parser = subparsers.add_parser('txt-to-csv', help='Convert TXT files to CSV')\r\n        txt_parser.add_argument('--input', '-i', required=True, help='Input folder containing TXT files')\r\n        txt_parser.add_argument('--output', '-o', required=True, help='Output folder for CSV files')\r\n\r\n        # Format itemscript conversion\r\n        format_parser = subparsers.add_parser('format-itemscript', help='Format and convert RYL2 itemscript files')\r\n        format_parser.add_argument('--input-folder', required=True, help='Input folder containing RYL2 txt files')\r\n        format_parser.add_argument('--output-folder', required=True, help='Output folder for converted CSV files')\r\n\r\n        # Test database connection\r\n        test_parser = subparsers.add_parser('test-connection', help='Test database connections')\r\n\r\n        # Show database tables and columns\r\n        show_parser = subparsers.add_parser('show-tables', help='Show all database tables and columns')\r\n        show_parser.add_argument('--database', '-d', help='Specific database name (optional)')\r\n\r\n        # Migrate data from SQL Server to MySQL\r\n        migrate_parser = subparsers.add_parser('migrate-data', help='Migrate data from SQL Server to MySQL')\r\n\r\n        # Create database tables\r\n        create_parser = subparsers.add_parser('create-tables', help='Create database tables from SQL Server schema')\r\n\r\n        # Restore database\r\n        restore_parser = subparsers.add_parser('restore-db', help='Restore database from backup file')\r\n        restore_parser.add_argument('--backup-file', required=True, help='Path to backup file')\r\n        restore_parser.add_argument('--server', default='localhost', help='SQL Server name')\r\n        restore_parser.add_argument('--database', default='master', help='Database name to restore to')\r\n        restore_parser.add_argument('--username', help='Username for database connection')\r\n        restore_parser.add_argument('--password', help='Password for database connection')\r\n\r\n        # Generic TXT to CSV (from txt_into_csv module)\r\n        generic_txt_parser = subparsers.add_parser('convert-txt', help='Convert generic TXT files to CSV')\r\n        generic_txt_parser.add_argument('--input-folder', default='INPUT', help='Input folder (default: INPUT)')\r\n        generic_txt_parser.add_argument('--output-folder', default='OUTPUT', help='Output folder (default: OUTPUT)')\r\n\r\n    def run(self):\r\n        \"\"\"Run the CLI application\"\"\"\r\n        if len(sys.argv) == 1:\r\n            self.parser.print_help()\r\n            return\r\n\r\n        args = self.parser.parse_args()\r\n\r\n        try:\r\n            if args.command == 'txt-to-csv':\r\n                self.txt_to_csv(args.input, args.output)\r\n            elif args.command == 'format-itemscript':\r\n                self.format_itemscript(args.input_folder, args.output_folder)\r\n            elif args.command == 'test-connection':\r\n                self.test_db_connection()\r\n            elif args.command == 'show-tables':\r\n                self.show_database_tables(args.database)\r\n            elif args.command == 'migrate-data':\r\n                self.migrate_database_data()\r\n            elif args.command == 'create-tables':\r\n                self.create_database_tables()\r\n            elif args.command == 'restore-db':\r\n                self.restore_database(args)\r\n            elif args.command == 'convert-txt':\r\n                self.convert_generic_txt(args.input_folder, args.output_folder)\r\n            else:\r\n                self.parser.print_help()\r\n\r\n        except Exception as e:\r\n            logger.error(f\"Error executing command: {e}\")\r\n            sys.exit(1)\r\n\r\n    def txt_to_csv(self, input_folder: str, output_folder: str):\r\n        \"\"\"Convert TXT files to CSV using txt_into_csv module\"\"\"\r\n        logger.info(f\"Converting TXT files from {input_folder} to CSV in {output_folder}\")\r\n\r\n        if not os.path.exists(input_folder):\r\n            logger.error(f\"Input folder {input_folder} does not exist\")\r\n            return\r\n\r\n        if not os.path.exists(output_folder):\r\n            os.makedirs(output_folder)\r\n            logger.info(f\"Created output folder: {output_folder}\")\r\n\r\n        txt_to_csv_main()\r\n        logger.info(\"TXT to CSV conversion completed\")\r\n\r\n    def format_itemscript(self, input_folder: str, output_folder: str):\r\n        \"\"\"Format and convert RYL2 itemscript files\"\"\"\r\n        logger.info(f\"Formatting RYL2 itemscript files from {input_folder} to {output_folder}\")\r\n\r\n        if not os.path.exists(input_folder):\r\n            logger.error(f\"Input folder {input_folder} does not exist\")\r\n            return\r\n\r\n        auto_detect_convert_and_save(input_folder, output_folder)\r\n        logger.info(\"RYL2 itemscript formatting completed\")\r\n\r\n    def test_db_connection(self):\r\n        \"\"\"Test database connections\"\"\"\r\n        logger.info(\"Testing database connections\")\r\n        try:\r\n            test_connection()\r\n            logger.info(\"Database connection test completed\")\r\n        except Exception as e:\r\n            logger.error(f\"Database connection test failed: {e}\")\r\n            raise\r\n\r\n    def show_database_tables(self, database: Optional[str] = None):\r\n        \"\"\"Show all database tables and columns\"\"\"\r\n        logger.info(\"Retrieving database tables and columns information\")\r\n\r\n        try:\r\n            sql_server = SQLSERVER()\r\n            if database:\r\n                sql_server_db = SQLSERVER(dbname=database)\r\n                table_info = get_all_table_info(sql_server_db)\r\n                results = {database: table_info}\r\n                sql_server_db.close()\r\n            else:\r\n                databases = sql_server.query(\"SELECT name FROM sys.databases;\")\r\n                sql_server.close()\r\n\r\n                results = {}\r\n                for db in databases:\r\n                    database_name = db['name']\r\n                    if database_name not in ['master', 'tempdb', 'model', 'msdb']:\r\n                        sql_server_db = SQLSERVER(dbname=database_name)\r\n                        table_info = get_all_table_info(sql_server_db)\r\n                        results[database_name] = table_info\r\n                        sql_server_db.close()\r\n\r\n            # Save to JSON file\r\n            json_output = json.dumps(results, indent=4, cls=CustomJSONEncoder)\r\n            with open(\"database.json\", \"w\") as json_file:\r\n                json_file.write(json_output)\r\n\r\n            print(\"Database information saved to database.json\")\r\n            logger.info(\"Database tables information retrieved successfully\")\r\n\r\n        except Exception as e:\r\n            logger.error(f\"Failed to retrieve database information: {e}\")\r\n            raise\r\n\r\n    def migrate_database_data(self):\r\n        \"\"\"Migrate data from SQL Server to MySQL\"\"\"\r\n        logger.info(\"Starting data migration from SQL Server to MySQL\")\r\n        try:\r\n            migrate_data_main()\r\n            logger.info(\"Data migration completed successfully\")\r\n        except Exception as e:\r\n            logger.error(f\"Data migration failed: {e}\")\r\n            raise\r\n\r\n    def create_database_tables(self):\r\n        \"\"\"Create database tables from SQL Server schema\"\"\"\r\n        logger.info(\"Creating database tables from SQL Server schema\")\r\n        try:\r\n            create_tables_main()\r\n            logger.info(\"Database table creation completed\")\r\n        except Exception as e:\r\n            logger.error(f\"Database table creation failed: {e}\")\r\n            raise\r\n\r\n    def restore_database(self, args):\r\n        \"\"\"Restore database from backup file\"\"\"\r\n        logger.info(f\"Restoring database from {args.backup_file}\")\r\n\r\n        # Update global variables in restore_database module\r\n        import restore_database\r\n        restore_database.server = args.server\r\n        restore_database.database = args.database\r\n        restore_database.username = args.username or 'your_username'\r\n        restore_database.password = args.password or 'your_password'\r\n        restore_database.backup_file = args.backup_file\r\n\r\n        try:\r\n            setup_logging()\r\n            restore_database_and_create_table()\r\n            logger.info(\"Database restoration completed successfully\")\r\n        except Exception as e:\r\n            logger.error(f\"Database restoration failed: {e}\")\r\n            raise\r\n\r\n    def convert_generic_txt(self, input_folder: str, output_folder: str):\r\n        \"\"\"Convert generic TXT files to CSV\"\"\"\r\n        logger.info(f\"Converting generic TXT files from {input_folder} to {output_folder}\")\r\n\r\n        if not os.path.exists(input_folder):\r\n            logger.error(f\"Input folder {input_folder} does not exist\")\r\n            return\r\n\r\n        if not os.path.exists(output_folder):\r\n            os.makedirs(output_folder)\r\n            logger.info(f\"Created output folder: {output_folder}\")\r\n\r\n        txt_to_csv_main()\r\n        logger.info(\"Generic TXT to CSV conversion completed\")\r\n\r\ndef main():\r\n    \"\"\"Main entry point\"\"\"\r\n    try:\r\n        cli = SelfModulesCLI()\r\n        cli.run()\r\n    except KeyboardInterrupt:\r\n        print(\"\\nOperation cancelled by user\")\r\n        sys.exit(0)\r\n    except Exception as e:\r\n        logger.error(f\"Unexpected error: {e}\")\r\n        sys.exit(1)\r\n\r\nif __name__ == \"__main__\":\r\n    main()"
        }
    ]
}